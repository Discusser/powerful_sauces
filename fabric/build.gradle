plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}


loom {
    Project common = project(":common")
    accessWidenerPath = file("src/main/resources/powerful_sauces.accesswidener")

    runs {
        datagen {
            client()

            name "Minecraft Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=powerful_sauces"
            vmArg "-Dporting_lib.datagen.existing_resources=${common.file("src/main/resources")}"

            environmentVariable("DATAGEN", "TRUE")
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    modImplementation("curse.maven:croptopia-415438:4997461")
    modImplementation("curse.maven:epherolib-885449:4949797")

    modRuntimeOnly("curse.maven:jei-238222:5630569")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/generated/resources",
            ]
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }

    from(project(":common").file("src/generated/resources")) {
        include('**/data/**')
        include('**/dependents/**')
        expand "dependent": "c"
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

compileJava {
    options.encoding = "UTF-8"
    source(sourceSets.main.allSource)
    doLast {
        copy {
            from "${buildDir}/resources/main/dependents/platform"
            include "**/**/*.json"
            expand "dependent": "c"
            into "${buildDir}/resources/main/data/c/"
        }
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
    relocate 'dependents/platform', 'data/c'
}

remapJar {
    input.set shadowJar.archiveFile
}
