plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "powerful_sauces.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    modRuntimeOnly("curse.maven:croptopia-415438:4997459")
    modRuntimeOnly("curse.maven:epherolib-885449:4889101")

    modRuntimeOnly("curse.maven:jei-238222:5630570")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.4.1"))

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/generated/resources",
            ]
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }

    [project(":common").file("src/generated/resources"), project(":common").file("src/main/resources")].each { src ->
        from(src) {
            include('**/data/**/*.json')
            include('**/dependents/**/*.json')
            expand "dependent": "forge"
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
        }
    }

    doLast {
        copy {
            from "${buildDir}/resources/main/dependents/platform"
            include "**/**/*.json"
            expand "dependent": "forge"
            into "${buildDir}/resources/main/data/forge/"
        }
    }
}

compileJava {
    options.encoding = "UTF-8"
    source(sourceSets.main.allSource)
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
    relocate 'dependents/platform', 'data/forge'
}

remapJar {
    input.set shadowJar.archiveFile
}
